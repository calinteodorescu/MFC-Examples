<HTML>
<HEAD>
   <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
   <META NAME="Author" CONTENT="Zafir Anjum">
   <TITLE>Menu - Owner Drawn Menu with Icons (4)</TITLE>
</HEAD>
<body background="../fancyhome/back.gif" bgcolor="#FFFFFF" link="#B50029" vlink="#8E2323" alink="#FF0000" bgproperties="fixed">
<table WIDTH="100%">
<tr WIDTH="100%">
<td align=center><!--#exec cgi="/cgi/ads.cgi"--><td>
</tr>
</table>


<CENTER>
<H3>
<FONT COLOR="#AOAO99">Owner Drawn Menu with Icons (4) (automatically uses toolbar res)</FONT></H3></CENTER>

<CENTER>
<H3>

<HR></H3></CENTER>
This article was contributed by <A HREF="mailto:warch@tin.it">Iuri Apollonio</A>. 


<P>This is another way to draw a menu with bitmaps item.
Basically, this thing was created to let the user see visually the correspondence of
a menu item and a toolbar button, so that he can learn easily the meanings of sometime
strange button drawing.

<P>Now, the Visual C++ give us that new nice toolbar resources .. why bother with icons or
bitmaps and link them to menus while we can automatically "connect" the toolbar resource
to them ?

<P>So I wrote a small class, CMenuSpawn, which takes care with some help from FrameWnd of
menu remapping and drawing.<br>

<img src="ownerdrawmenu4.gif" width="120" height="130" alt="ownerdrawmenu4.gif (2479 bytes)">

<P>What has been updated, changed, added since the last version:<BR>
06.22.1998:
<ul>
<li>fixed something in documentation</li>
</ul>
06.14.1998:
<ul>
<li>fixed again standard menu font different from control panel settings</li>
<li>add support for having the main menu (on title bar) highlighted with 3d boxes instead of standard highlight color
(this has been implemented in both MDI and SDI code, but tested only under MDI .. hope it will work with SDI too)</li>
</ul>
05.14.1998:
<ul>
<li>fix a bug that crashed when trying a not-existing shortcut under NT (thanks, Craig!)</li>
<li>enhanced drawing of disabled bitmap (thanks to Michael Santoro)</li>
<li>fixed standard menu font different from control panel settings</li>
</ul>
04.28.1998:
<ul>
<li>fix some memory/resource leaks reported from BoundsChecker but not from Msdev (I'm not an owner of BoundsChecker - thanks to H.Tome, C. Schmidt, and all the others who report them)</li>
<li>added support for shortcut for menu items and popups</li>
<li>added support for a user font for the menu</li>
<li>added support for user defined color of menu items</li>
<li>added support for using bitmap as menu background</li>
<li>(hope to have) fixed the bug who sometimes make the text (especially of popups) disappear and/or enlarge VERY much the popup - however, yet to understand why it did so :)</li>
<li>added a contructor with a boolean value to be used when creating popup menu (look at demo, in the view right mouse click)</li>
<li>added some base classes for CFrameWnd, CMDIFrameWnd and CMDIChildFrameWnd to make it easier the work; you can now simply rederive your CMainFrame from CSpawnFrameWnd or CSpawnMDIFrameWnd and eventually your CChildFrame from CSpawnMDIChildWnd to get the WM_MEASUREITEM, WM_DRAWITEM, WM_INITMENU, WM_INITMENUPOPUP handled</li>
</ul>

<P>Now I will explain how to use it in a MDI application:


<H4>Step 1: including files</H4>
We need to include the CSpawnMenu class in our application and the Bitmap resource named
IDB_MENUCHK from the sample application which comes along (it will be used to draw
"check marks" aside menu item which need it - you can freely change it).

<H4>Step 2: handling frame messages</H4>
We also need to manage some of the frame windows handler; we have 2 ways to do this. The
simplest is to derive the CMainFrame from the CSpawnMDIFrameWnd class instead of CMDIFrameWnd.
This means you have to (using Search/Replace) replace all istance of CMDIFrameWnd with
CSpawnMDIFrameWnd (and of course include in your project file the files
SpawnMDIFrameWnd.cpp and SpawnMDIFrameWnd.h). You will also need to do this for the
CChildFrame class, deriving from CSpawnMDIChildWnd and including SpawnMDIChildWnd.cpp/.h.
The other way is to look at how this CSpawnFramexxx classes are been made and copy it
(that means putting a CMenuSpawn member in the frame class header and handling the
WM_DRAWITEM, WM_MEASUREITEM, WM_MENUCHAR, WM_INITMENU and WM_INITMENUPOPUP).
<P>
If you are making an SDI application instead of an MDI, derive the CFrameWnd from
CSpawnFrameWnd and include the SpawnFrameWnd.cpp/.h files.



<H4>Step 3: initializing the CSpawnClass</H4>
We need to modify the CMainFrame class in this way:
<ul>
<li>add a CMenuSpawn cSpawn instance in the include file; note that if you use a CSpawnFramexxx class as base class for mainframe,
you already get an instance of <FONT COLOR="#990000">CMenuSpawn</FONT> named <FONT COLOR="#990000">cSpawn</FONT>.
<li>initialize the CMenuSpawn class in the CMainFrame constructor (cSpawn.LoadToolBarResource(IDR_MAINFRAME)) this will load the toolbar resource into the class; you can alse use the AddToolBarResource function to add more than toolbar resource to the class. In the demo app, I add a toolbar for the system menu 
</ul>
<PRE><TT><FONT COLOR="#990000">
CMainFrame::CMainFrame()
{
	cSpawn.LoadToolBarResource(IDR_MAINFRAME);
}
</FONT></TT></PRE>


<H4>Step 4: Note to Stingray Software's Objective Toolkit Pro users</H4>
If you are using the OT Pro, maybe along with the SECMenuBar to obtain Office97 menu
button look and feel, you will also need to override the WindowProc virtual of the
CMainFrame as noted below:
<PRE><TT><FONT COLOR="#990000">
LRESULT CMainFrame::WindowProc(UINT message, WPARAM wParam, LPARAM lParam) 
{
	if (message != WM_MEASUREITEM) return SECFrameWnd::WindowProc(message, wParam, lParam);
	else return CFrameWnd::WindowProc( message, wParam, lParam );	
}
</FONT></TT></PRE>
If you are using another OTPro class other than SECFrameWnd as base class, change SECFrameWnd to reflect your base class. Note however that their very last release of OTPro support bitmapped menu (but not popups).

<H4>Note for misterious bug in the system menu (usually in SDI application)</H4>
It has been reported (thanks to Alexander V. Kudakov) that often in SDI application the system menu
get corrupted. The fix is simple and mystic enought (magic here, guy!):<br>
in the <FONT COLOR="#990000">CMainframe::OnCreate()</FONT> you'll have to call:<br>
<FONT COLOR="#990000">
GetSystemMenu(false);<br>
</FONT>
and thak's all, folks! If someone is able to explain why this fix works to us, Alexander and I will be glad to know.


<H4>Note for new 3d highlight of main menu items on menubar</H4>
I've added the 3d highlight of main menu items; look at source code for CSpawnMDIFrameWnd for understanding how.
I've written code for those function:
<PRE><TT><FONT COLOR="#990000">
void OnEnterMenuLoop(BOOL bIsTrackPopupMenu);
void OnExitMenuLoop(BOOL bIsTrackPopupMenu);
UINT OnNcHitTest(CPoint point);
void OnTimer(UINT nIDEvent);
int OnCreate(LPCREATESTRUCT lpCreateStruct);
void OnDestroy();
</FONT></TT></PRE>
Actually, if you don't want this highlight system, you'll have to remove it by yourself .. I've not yet
included a way to enable/disable it.
If you are making a MDI application, look at the InitInstance function of the app class for
the code between the <FONT COLOR="#990000">// 3D HIGHLIGHT CODE</FONT> and <FONT COLOR="#990000">// 3D HIGHLIGHT CODE END</FONT> comments; you'll need
to do this in your app too or the initial menu will be ugly to see until you use them almost once.


<P>And that's all to have basic coolmenu support.

<BR>Looking at the demo application, which implements an MDI Edit application, you will find a way to implement popup coolmenu.


<P>Here follows a small description of the most useful function of the CSpawnMenu class:

<FONT COLOR="#990000"><P>
bool MeasureItem(..)
</FONT><br>
To be called from the CWnd OnMeasureItem(..); call the base class if it return false
</P>

<FONT COLOR="#990000"><P>
bool DrawItem(..)
</FONT><br>
  To be called from the CWnd OnDrawItem(..); call the base class if it return false
</P>

<FONT COLOR="#990000"><P>
bool LoadToolBarResource(unsigned int resId)
</FONT><br>
  Load a toolbar resource in the class; an array of command id will be created and
  mapped to index of an imagelist
</P>

<FONT COLOR="#990000"><P>
bool AddToolBarResource(unsigned int resId)
</FONT><br>
  Add a toolbar resource to the class; works as the LoadToolBarResource
</P>

<FONT COLOR="#990000"><P>
void RemapMenu(CMenu * pMenu)
</FONT><br>
  Makes all the items of the menu OwnerDraw, (eventually) maps them with the appropiate
  images index based on the item command id; has to be called from the WM_INITMENU and
  WM_INITPOPUPMENU and before the TrackPopupMenu function
</P>

<FONT COLOR="#990000"><P>
void EnableMenuItems(CMenu * pMenu, CWnd * pWnd)
</FONT><br>
  Use the MFC command enabler mechanism to enable/disable menu items; need the pointer of
  the menu and the pointer of the CWnd of which the command enablers are to be used;
  it is designed to be used with popups menu from the right button click in Views
  (see the CEditView in sample apps for an example)
</P>

<FONT COLOR="#990000"><P>
bool SetFont(LOGFONT * lf)
</FONT><br>
  If someone, for evil pourpose, want to use a different font to draw the menu items,
  it is possible to call this function (before the menu are displayed, for example in the
  CMainFrame contructor after the LoadToolBarResource()). Look at the demo, there is commented
  code.
</P>

<FONT COLOR="#990000"><P>
bool FindKeyboardShortcut(UINT nChar, UINT nFlags, CMenu * pMenu, LRESULT & lRes)
</FONT><br>
  This is needed to handle the shortcuts when the menu is displayed (the &Letter shortcurs); you
  need to call it in response to WM_MENUCHAR messages of CMainFrame, CChildFrame if MDI app, and
  CView if using Spawn popups; the usage is a bit complex, look at demo and copy/paste the
  code.
</P>

<FONT COLOR="#990000"><P>
void SetTextColor(const COLORREF crNormal, const COLORREF crSelected)
</FONT><br>
  You can use this to specify different colors from default for the normal and
  selected menu items
</P>

<FONT COLOR="#990000"><P>
void SetBackBitmap(const int iRes)<br>
void SetBackBitmap(const int iRes, COLORREF crBackColor)
</FONT><br>
  Now you can use bitmaps as background for menu using one of this 2 function. The first
  simply set a bitmap, the second change the color you specify to the menu background
  obtaining a simple transparency. Pay attention to the bitmap you use, which can make
  the menu text unreadable; you may need to use SetFont to set a bold font to read the
  text and the SetTextColor to use brighter color if you use strange bitmaps.
  In the demo, bitmap are enabled in the app menu, and disabled in the popup of the view.
  To see how to disable it, comment the SetBackBitmap in the CMainFrame constructor of the
  demo.
</P>

<FONT COLOR="#990000"><P>
bool GetMenuItemText(CString &csText, CMenu * pMenu, const int cmd, bool bByPos)
</FONT><br>
  Use this function to retrieve the text of a menu item; csText will contain the text, cmd is
  the menu identifier or position, bByPos is true if cmd is the position of menu identifier or
  false if it is an identifier. If the funtion returns true, csText contain valid text.
</P>

<FONT COLOR="#990000"><P>
bool IsSpawnMenu(CMenu * pMenu, const int iItem, const bool bByPos)
</FONT><br>
  This function is used internally; however, you can use it to see if a menu item as been
  handled by SpawnMenu or not (not usually means bitmap menu item, like icons of mdi child and
  maximize/minimize/close buttons of mdi child, which are handled by Evil Windows as menus,
  and not as buttons as everybody could imagine).
</P>


<P>Very thanks to Craig Schmidt for support!


<P>Feel free to use and modify this class with all your software - I will only be glad to know for which apps it will be used and of any improvement you will do to it!

<P><A HREF="owner_drawn_menu4.zip">Download demo project</A> 107K
<p>Last updated: 26 May 1998 </p>

<P>
<HR>
<TABLE BORDER=0 WIDTH="100%" >
<TR>
<TD WIDTH="33%"><FONT SIZE=-1><A HREF="http://www.codeguru.com">Goto HomePage</A></FONT></TD>

<TD WIDTH="33%">
<CENTER><FONT SIZE=-2>&copy; 1998 Zafir Anjum</FONT>&nbsp;</CENTER>
</TD>

<TD WIDTH="34%">
<DIV ALIGN=right><FONT SIZE=-1>Contact me: <A HREF="mailto:zafir@home.com">zafir@home.com</A>&nbsp;</FONT></DIV>
</TD>
</TR>
</TABLE>

</BODY>
</HTML>
