<HTML>

<HEAD>
<TITLE>Win32 Foundation Classes - Table of Contents</TITLE>
<META NAME="description" CONTENT="A detailed list of classes contained in the Win32 Foundation Classes library ($Revision: 35 $).">
<META NAME="keywords" CONTENT="C++, programming, freeware, source code, MFC, extension, toolkit">
<!-- $Revision: 35 $ -->
</HEAD>

<BODY>

<TABLE BORDER="0" WIDTH="100%" CELLPADDING="0" CELLSPACING="0">
<TR><TD BGCOLOR="#0" VALIGN="MIDDLE">
<FONT FACE="Arial" SIZE="3" COLOR="#FFFFFF">
&nbsp;<I><B>Table Of Contents</B></I></FONT>
</TD></TR></TABLE><P>

<A HREF="Release44.htm" TARGET="Explain">Here</A>'s what's new.<BR>

<P>

<CENTER>Click
<A HREF="http://ourworld.compuserve.com/homepages/Sam_Blackburn/wfc.zip">here</A>
to download WFC.</CENTER>

<P>

<CENTER>Or click 
<A HREF="http://www.erols.com/sblackbu/WFC.ZIP">here</A>
to download from the mirror site.</CENTER>

<P>

<CENTER>Click 
<A HREF="http://ourworld.compuserve.com/homepages/Sam_Blackburn/sample.zip">here</A>
or
<A HREF="http://www.erols.com/sblackbu/SAMPLE.ZIP">here</A>
to download the samples for WFC.</CENTER>

<P>

<A HREF="TechNotes.htm">Technical Notes</A> can be found here.

<P>

<B>WARNING!</B> WFC is distributed in <A HREF="pax.htm" TARGET="Explain">PAX</A> format.<P>
What's the best way to learn WFC? An example teaches, not much else does. Checkout the
<A HREF="Samples.htm" TARGET="Explain">samples</A> section.

<P>

WFC was created with these <A HREF="Coding.htm" TARGET="Explain">coding guidelines</A>.<P>
Only examples teach, <A HREF="Samples.htm" TARGET="Explain">here</A>'s the WFC sample
programs.


<P>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="0" CELLSPACING="0">
<TR><TD BGCOLOR="#0" VALIGN="MIDDLE">
<FONT FACE="Arial" SIZE="3" COLOR="#FFFFFF">
&nbsp;<I><B>WFC Classes</B></I></FONT>
</TD></TR></TABLE>
<P>

<B>CAccessAllowedEntry</B> - Encapsulates the ACCESS_ALLOWED_ACE structure.<P>

<B>CAccessControlEntryHeader</B> - Encapsulates the ACE_HEADER structure.<P>

<B>CAccessControlList</B> - Encapsulates the ACL structure.<P>

<B>CAccessDeniedEntry</B> - Encapsulates the ACCESS_DENIED_ACE structure.<P>

<B>CAccessTimeout</B> - Encapsulates the ACCESSTIMEOUT structure.<P>

<B><A HREF="ATCP.htm" TARGET="Explain">CAppleTalkProjectionResult</A></B> - 
excapsulates the RAS_PPP_ATCP_RESULT structure.<P>

<B><A HREF="CBase64Coding.htm" TARGET="Explain">CBase64Coding</A></B> - Simple
base64 encoder/decoder. This is what MIME uses to send binary data in e-mail.<P>

<B><A HREF="CBitArray.htm" TARGET="Explain">CBitArray</A></B> - Treats bits like
they were just any other array. Patterned after CByteArray except
it plays with bits instead of bytes.<P>

<B>CBitmapCoreHeader</B> - Encapsulates the BITMAPCOREHEADER structure.<P>

<B>CBitmapFileHeader</B> - Encapsulates the BITMAPFILEHEADER structure.<P>

<B>CBitmapInfoHeader</B> - Encapsulates the BITMAPINFOHEADER structure.<P>

<B>CCommunicationsConfiguration</B> - Encapsulates the COMM_CONFIG data structure.<P>

<B>CCommunicationProperties</B> - Encapsulates the COMMPROP data structure.<P>

<B>CCompVars</B> - Encapsulates the COMPVARS structure.<P>

<B>CColorAdjustment</B> - Encapsulates the COLORADJUSTMENT structure.<P>

<B><A HREF="CCriticalSectionGuard.htm" TARGET="Explain">CCriticalSectionGuard</A></B> - Locks a CCriticalSection (an MFC class)
in the constructor and unlocks it in the destructor.<P>

<B><A HREF="CCryptographicAlgorithm.htm" TARGET="Explain">CCryptographicAlgorithm</A></B> - encapsulates the PROV_ENUMALGS structure.<P>

<B><A HREF="CCryptographicHash.htm" TARGET="Explain">CCryptographicHash</A></B> - encapsulates the 
hash portions of the
<A HREF="http://premium.microsoft.com/msdn/library/sdkdoc/crypto/overview_02nd.htm" TARGET="_parent">CryptoAPI</A>.<P>

<B><A HREF="CCryptographicKey.htm" TARGET="Explain">CCryptographicKey</A></B> - encapsulates the 
key portions of the <A HREF="http://premium.microsoft.com/msdn/library/sdkdoc/crypto/overview_02nd.htm" TARGET="_parent">
CryptoAPI</A>.<P>

<B><A HREF="CCryptographicProvider.htm" TARGET="Explain">CCryptographicProvider</A></B> - encapsulates the 
cryptographic provider portion of the <A HREF="http://premium.microsoft.com/msdn/library/sdkdoc/crypto/overview_02nd.htm" TARGET="_parent">
CryptoAPI</A>.<P>

<B><A HREF="CCryptography.htm" TARGET="Explain">CCryptography</A></B> - This is the base 
class for all cryptographic classes that provide functionality.<P>

<B><A HREF="CDataChunk.htm" TARGET="Explain">CDataChunk</A></B> - 
Allows for handling of data chunks. Patterned after RIFF.<P>

<B><A HREF="CDataFile.htm" TARGET="Explain">CDataFile</A></B> -
A derivative of CFile that makes it easy to read/write
<A HREF="CDataChunk.htm" TARGET="Explain">CDataChunk</A>'s.<P>

<B><A HREF="CDataMemory.htm" TARGET="Explain">CDataMemory</A></B> - 
Handles a collection of RIFF chunks.<P>

<B><A HREF="CDataParser.htm" TARGET="Explain">CDataParser</A></B> -
Generic data parsing class.<P>

<B><A HREF="CDataSocket.htm" TARGET="Explain">CDataSocket</A></B> -
A derivative of <A HREF="CDataFile.htm" TARGET="Explain">CDataFile</A>
that allows you to transmit
<A HREF="CDataChunk.htm" TARGET="Explain">CDataChunk</A>'s over a
<A HREF="sockets.htm" TARGET="Explain">CSimpleSocket</A>.<P>

<B><A HREF="CDESKTOP.HTM" TARGET="Explain">CDesktop</A></B> - Encapsulates the desktop API.<P>

<B>CDeviceControlBlock</B> - Encapsulates DCB structure used in serial communications.<P>

<B>CDocInfo</B> - Encapsulates the DOCINFO structure.<P>

<B>CDragQuery</B> - Encapsulates the HDROP handle and API. Useful when
handling the WM_DROPFILES message (or OnDropFiles method in MFC).<P>

<B><A HREF="DumyFile.htm" TARGET="Explain">CDummyFile</A></B> - A class that traps all calls to CFile that would blow up
if you weren't a disk file.<P>

<B><A HREF="CEvntLog.htm" TARGET="Explain">CEventLog</A></B> - The event logger.
Makes working with log events easier. Allows you to read event log messages,
create custom event logs, clear logs, pretty much anything you would ever
want to do with an event log.<P>

<B><A HREF="CEventLogRecord.htm" TARGET="Explain">CEventLogRecord</A></B> - encapsulates the
EVENTLOGRECORD structure.<P>

<B><A HREF="CExtensibleMarkupLanguageAttribute.htm" TARGET="Explain">CExtensibleMarkupLanguageAttribute</A></B> -
class that encapulates an <A HREF="http://www.w3.org/TR/" TARGET="_parent">XML</A> attribute.<P>

<B><A HREF="CExtensibleMarkupLanguageDocument.htm" TARGET="Explain">CExtensibleMarkupLanguageDocument</A></B> -
class that encapulates an <A HREF="http://www.w3.org/TR/" TARGET="_parent">XML</A> document.<P>

<B><A HREF="CExtensibleMarkupLanguageElement.htm" TARGET="Explain">CExtensibleMarkupLanguageElement</A></B> -
class that encapulates an <A HREF="http://www.w3.org/TR/" TARGET="_parent">XML</A> element.<P>

<B><A HREF="CFileDirectory.htm" TARGET="Explain">CFileDirectory</A></B> -
This class gives you the capability to retrieve the
names of files (complete full-path filenames) in
a directory. You can fill in a CStringArray with the
filenames or execute a callback function. You can
process the files in a single directory or recurse
through the subdirectories.<P>

<B><A HREF="CFileTime.htm" TARGET="Explain">CFileTime</A></B> - Encapsulates the FILETIME structure/API.<P>

<B><A HREF="CFileTransferProtocol.htm" TARGET="Explain">CFileTransferProtocol</A></B> - Makes
it a little easier to play with ftp. It retrieves directory listings
or files. Easier to use than the MFC counterparts.<P>

<B>CFilterKeys</B> - Encapsulates the FILTERKEYS structure.<P>

<B><A HREF="CGarbageCollector.htm" TARGET="Explain">CGarbageCollector</A></B> - 
Makes rolling your own copy-on-write objects easy.<P>

<B><A HREF="IPXCP.htm" TARGET="Explain">CInternetworkPacketExchangeProjectionResult</A></B> - 
encapsulates the RAS_PPP_IPXCP_RESULT structure.<P>

<B><A HREF="IPCP.htm" TARGET="Explain">CInternetProtocolProjectionResult</A></B> -
encapsulates the RAS_PPP_IPCP_RESULT data structure.<P>

<B><A HREF="LSOCKETS.htm" TARGET="Explain">CListeningSocket</A></B> - Establishes a socket
that people can connect to (i.e., makes a server socket).<P>

<B><A HREF="lzfile.htm" TARGET="Explain">CLZFile</A></B> - Handles the LZxxx API (compressed files)<P>

<B><A HREF="CMemoryFile.htm" TARGET="Explain">CMemoryFile</A></B> - A simple memory mapped
file class. It handles the annoyance of mapping a file on an allocation
granularity boundary so you don't have to.<P>

<B>CMemoryStatus</B> - Encapsulates the MEMORYSTATUS structure<P>

<B><A HREF="CMicrosoftTape.htm" TARGET="Explain">CMicrosoftTape</A></B> -
Child of
<A HREF="CTape.htm" TARGET="Explain">CTape</A>
that knows about the Microsoft Tape Format used
by NTBACKUP.EXE This is an unfinished class.<P>

<B><A HREF="cmixer.htm" TARGET="Explain">CMixer</A></B> - Mixer API stuff.<P>

<B><A HREF="CMixerCapabilities.htm" TARGET="Explain">CMixerCapabilities</A></B> - Encapsulates the MIXERCAPS structure.<P>

<B><A HREF="CMixerControl.htm" TARGET="Explain">CMixerControl</A></B> - Encapsulates the MIXERCONTROL structure.<P>

<B>CMixerControlDetails</B> - Mixer API stuff.<P>

<B>CMixerControlDetailsData</B> - Mixer API stuff.<P>

<B>CMixerControlInstance</B> - Mixer API stuff.<P>

<B>CMixerDestination</B> - Mixer API stuff.<P>

<B>CMixerLine</B> - Mixer API stuff.<P>

<B>CMixerSource</B> - Mixer API stuff.<P>

<B>CMixerSourceSelector</B> - Mixer API stuff.<P>

<B>CMixerSpeakers</B> - Mixer API stuff.<P>

<B>CMixerSwitchControl</B> - Mixer API stuff.<P>

<B>CMixerVolumeControl</B> - Mixer API stuff.<P>

<B>CMixerWaveIn</B> - Mixer API stuff.<P>

<B>CModem</B> - A class that hangs off of
<A HREF="serial.htm" TARGET="Explain">CSerialFile</A>
that makes it easy to play with modems<P>

<B>CMouseKeys</B> - Encapsulates the MOUSEKEYS structure.<P>

<B>CMTFDataBlockHeader </B>- Encapsulates the MTF_DB_HDR structure.<P>

<B>CMTFDateTime</B> - Encapsulates the MTF_DATE_TIME structure.<P>

<B>CMTFTape</B> - Encapsulates the MTF_TAPE structure.<P>

<B>CMTFTapeAddress</B> - Encapsulates the MTF_TAPE_ADDRESS structure.<P>

<B>CNamedPipe</B> - <I>Unfinished class. Will be derived from CDummyFile</I><P>

<B><A HREF="NBFCP.htm" TARGET="Explain">CNetBEUIFramerProjectionResult</A></B> - encapsulates the
RAS_PPP_NBFCP_RESULT structure.<P>

<B><A HREF="CNetwork.htm" TARGET="Explain">CNetwork</A></B> - Base class for all networking functionality.
It allows you to enumerate ports on a computer, reboot the computer (locally or remotely) and
get the time from the named computer.<P>

<B><A HREF="CNetworkConnectionInformation.htm" TARGET="Explain">CNetworkConnectionInformation</A></B> -
Class based on CONNECTION_INFO_1 structure. It allows you to enumerate
through the people that are connected to your machine.<P>

<B><A HREF="CNetConn.htm" TARGET="Explain">CNetworkConnections</A></B> - Class that plays with network connections.<P>

<B><A HREF="CNetworkFileInformation.htm" TARGET="Explain">CNetworkFileInformation</A></B> -
Class based on FILE_INFO_3 structure.<P>

<B><A HREF="CNetFile.htm" TARGET="Explain">CNetworkFiles</A></B> - Class that plays with network files.<P>

<B>CNetworkInformation</B> - Encapsulates the NETINFOSTRUCT structure.<P>

<B>CNetworkResources</B> - Class that plays with network resources.<P>

<B>CNetworkResourceInformation</B> - Class based on NETRESOURCE structure.<P>

<B><A HREF="CNetScheduleJob.htm" TARGET="Explain">CNetScheduleJob</A></B> - 
Let's you schedule jobs. It interfaces with the Scheduler Service.<P>

<B>CNetworkSessions</B> - Class that plays with network sessions.<P>

<B>CNetworkSessionInformation</B> - Class based on SESSION_INFO_502 structure.<P>

<B>CNetworkShareInformation</B> - Class based on SHARE_INFO_2 structure.<P>

<B><A HREF="CNetShar.htm" TARGET="Explain">CNetworkShares</A></B> - Allows you to query machines about their shares, add new shares,
delete existing ones, etc.<P>

<B>CNetWorkstation</B> - Gathers information about the workstation.<P>

<B>CNetworkUserInformation</B> - Encapsulates and  combines the USER_INFO_xxx data structures.<P>

<B><A HREF="CNetworkUser.htm" TARGET="Explain">CNetworkUsers</A></B> - Plays with the NetUserxxx API. Makes it easy to enumerate, add and delete
users.<P>

<B>COFStruct</B> - Encapsulates the OFSTRUCT structure.<P>

<B>COperatingSystemVersionInformation</B> - Encapsulates the OSVERSIONINFO structure.<P>

<B>COutlineTextMetric</B> - Encapsulates the OUTLINETEXTMETRIC structure.<P>

<B>COverlapped</B> - Plays with OVERLAPPED structure.<P>

<B><A HREF="CParsePoint.htm" TARGET="Explain">CParsePoint</A></B> -
Class that holds a location in s data stream. Used in parsing data
with the <A HREF="CDataParser.htm" TARGET="Explain">CDataParser</A> class.<P>

<B><A HREF="CPasswordChangeFilter.htm" TARGET="Explain">CPasswordChangeFilter</A></B> -
A class that makes it easy to intercept password changes.<P>

<B>CPerfCounterDefinition</B> - Encapsulates the PERF_COUNTER_DEFINITION structure.<P>

<B>CPerfInstanceDefinition</B> - Encapsulates the PERF_INSTANCE_DEFINITION structure.<P>

<B><A HREF="CPhysicalDiskFile.htm" TARGET="Explain">CPhysicalDiskFile</A></B> -
This class makes it easy to read data from a disk
in raw format. In other words, this class reads a disk
like it was a file without regard to file system on that 
disk. Want to read an individual sector on the disk? This
is the class for you.<P>

<B><A HREF="cping.htm" TARGET="Explain">CPing</A></B> - A class that allows 
you to programmatically ping another machine.<P>

<B><A HREF="cpingres.htm" TARGET="Explain">CPingResults</A></B> - Holds the 
results of the ping call<P>

<B>CPixelFormatDescriptor</B> - Encapsulates the PIXELFORMATDESCRIPTOR structure.<P>

<B><A HREF="CQueue.htm" TARGET="Explain">CQueue</A></B> - A
simple thread-safe high-performance data queue. It is designed
so that one thread can add to the queue and another can get
from it without the two threads blocking on each other.<P>

<B><A HREF="RASPPPCR.htm" TARGET="Explain">CPointToPointProtocolProjectionResult</A></B> - 
encapsulates the RAS_PPP_PROJECTION_RESULT structure.<P>

<B><A HREF="PortInformation.htm" TARGET="Explain">CPortInformation</A></B> - Provides the same information as PORT_INFO_2 data structures.
Used in enumerating ports on a machine (i.e.
<A HREF="CNetwork.htm" TARGET="Explain">CNetwork</A>::EnumeratePorts).<P>

<B><A HREF="CPasswordChangeFilter.htm" TARGET="Explain">CPasswordChangeFilter</A></B> - A class
that makes it easy to intercept password changes.<P>

<B><A HREF="CRandomNumberGenerator.htm" TARGET="Explain">CRandomNumberGenerator</A></B> - Gives
you better random numbers than rand(). It has about 900 million starting
points, each starting point is good for 10^30 values before it starts
to repeat. It uses the RANMAR algorithm (from the old FORTRAN days).<P>

<B><A HREF="CRandomNumberGenerator2.htm" TARGET="Explain">CRandomNumberGenerator2</A></B> - Gives
you better random numbers than rand(). It is good for 
(2^19937)-1
values before it starts to repeat. It is also faster than the other random
number generators in WFC. It uses the Mersenne Twister algorithm.<P>

<B>CRasterizerStatus</B> - Encapsulates the RASTERIZER_STATUS structure.<P>

<B><A HREF="CReedSolomonErrorCorrectionCode.htm" TARGET="Explain">CReedSolomonErrorCorrectionCode</A></B> -
Allows you to put a forward
error correction code onto a block of data. This class blocks data into 255
byte chunks. Up to 16 of those bytes can be scrambled and the errors will
automatically be fixed.<P>

<B><A HREF="Registry.htm" TARGET="Explain">CRegistry</A></B>
- Encapsulates the Registration Database (Registry API).<P>

<B><A HREF="CRAS.HTM" TARGET="Explain">CRemoteAccessService</A></B> - Remote Access Services.
Otherwise known as Dial Up Networking. This class allows you to establish
connections, hang up connections, <P>

<B><A HREF="CRASADM.htm" TARGET="Explain">CRemoteAccessServiceAdministration</A></B> -
A work in progress. Handles the administration of RAS.<P>

<B>CRemoteAccessServiceAuthenticationMessageBlock</B> - Encapsulates the RASAMB structure.<P>

<B><A HREF="RASCP.htm" TARGET="Explain">CRemoteAccessServiceConnectionProjection</A></B> - 
encapsulates the RAS_PORT_STATISTICS structure.<P>

<B>CRemoteAccessServiceInternetProtocol</B> - Encapsulates the RASPPPIP structure.<P>

<B>CRemoteAccessServiceInternetworkPacketExchange</B> - Encapsulates the RASPPPIPX structure.<P>

<B>CRemoteAccessServiceNetBEUIFramer</B> - Encapsulates the RASPPPNBF structure.<P>

<B><A HREF="RemoteAccessServicePort.htm" TARGET="Explain">CRemoteAccessServicePort</A></B> - Encapsulates the RAS_PORT_0 data structure.<P>

<B><A HREF"RASPSTAT.HTM" TARGET="Explain">CRemoteAccessServicePortStatistics</A></B> - 
encapsulates the RAS_PORT_STATISTICS structure.<P>

<B><A HREF="RemoteAccessServiceUser.htm" TARGET="Explain">CRemoteAccessServiceUser</A></B> - Encapsulates the RAS_USER_0
data structure.<P>

<B>CSecurityAttributes</B> - Encapsulates the SECURITY_ATTRIBUTES structure.<P>

<B>CSecurityQualityOfService</B> - Encapsulates the SECURITY_QUALITY_OF_SERVICE structure.<P>

<B><A HREF="serial.htm" TARGET="Explain">CSerialFile</A></B> - Treats the serial port like
it was a CFile. Makes doing RS232 communications easier.<P>

<B><A HREF="CServer.htm" TARGET="Explain">CServer</A></B> -
This class allows you to gather information about a server.
It can get you information similiar to the Server Control Panel applet.
Decrypts data scrambled by <CODE>NetServerGetInfo</CODE>().<P>

<B><A HREF="CService.htm" TARGET="Explain">CService</A></B>
- NT Services class. Makes creating services pretty brainless.<P>

<B><A HREF="CServiceApplication.htm" TARGET="Explain">CServiceApplication</A></B> - This
class encapsulates all of the logic behind installing,
removing and running from a command line (to make
debugging easier) needed by a service application.<P>

<B>CServiceConfiguration</B> - Basically duplicated QUERY_SERVICE_CONFIG structure.<P>

<B><A HREF="CSvcmgr.htm" TARGET="Explain">CServiceControlManager</A></B>
- Plays with the Service Control Manager. Allows you to start, stop, install
and remove services on the local machine or on a server on the net.<P>

<B>CServiceNameAndStatus</B> - Encapsulates the ENUM_SERVICE_STATUS structure.<P>

<B>CSessionInformation</B> - Session information based on SESSION_INFO_502 structure. 
Basically, gives you same info as Control Panel-&gt;Server-&gt;Users-&gt;Connected
Users<P>

<B><A HREF="CSharedMemoryObject.htm" TARGET="Explain">CSharedMemoryObject</A></B> - Let's
you create shared memory segments easily.<P>

<B><A HREF="sockets.htm" TARGET="Explain">CSimpleSocket</A></B> - Base class for TCP/IP sockets.
Derived from CDummyFile.<P>

<B>CSimpleSocketFile</B> - Turns an existing
<A HREF="sockets.htm" TARGET="Explain">CSimpleSocket</A>
into a CFile. Generally, this is called from
<A HREF="LSOCKETS.htm" TARGET="Explain">CListeningSocket</A>::OnNewConnection()<P>

<B>CSoundSentry</B> - Encapsulates the SOUNDSENTRY structure.<P>

<B>CStickyKeys</B> - Encapsulates the STICKYKEYS structure.<P>

<B>CSystemAuditEntry</B> - Encapsulates the SYSTEM_AUDIT_ACE structure.<P>

<B><A HREF="CSystemTime.htm" TARGET="Explain">CSystemTime</A></B> - Encapsulates the SYSTEMTIME structure/API.
It also allows you to get and set the computer's clock.<P>

<B>CTalkingSocket</B> - A socket you can use to connect to existing sockets (you connect to a server).<P>

<B><A HREF="ctape.htm" TARGET="Explain">CTape</A></B> - Handles the Tape API. It finally works.<P>

<B>CTapeGetDriveParameters</B> - Encapsulates the TAPE_GET_DRIVE_PARAMETERS data structure.<P>

<B><A HREF="CTapeGetMediaParameters.htm" TARGET="Explain">CTapeGetMediaParameters</A></B> -
Encapsulates the TAPE_GET_MEDIA_PARAMETERS data structure.<P>

<B>CTapeSetDriveParameters</B> - Encapsulates the TAPE_SET_DRIVE_PARAMETERS data structure.<P>

<B>CTapeSetMediaParameters</B> - Encapsulates the TAPE_SET_MEDIA_PARAMETERS data structure.<P>

<B>CTextMetric</B> - Encapsulates the TEXTMETRIC structure.<P>

<B>CToggleKeys</B> - Encapsulates the TOGGLEKEYS structure.<P>

<B>CUINT64</B> - Encapsulates the UINT64 structure.<P>

<B>CUniformResourceLocator</B> - Plays with URL's Example: http://www.microsoft.com/hello.html<P>

<B>CUniversalNamingConvention</B> - Plays with UNC's Example: \\buckaroo\public\neato\readme.txt<P>

<B><A HREF="CVolume.htm" TARGET="Explain">CVolume</A></B> -
This class let's you eject removable media (CD-ROM's
JAZ drives, tapes, etc). It also let's you lock drives.<P>

<B>CWindowPlacement</B> - Encapsulates the WINDOWPLACEMENT structure.<P>

<B>CWorkstationTransport</B> - Patterend after WKSTA_TRANSPORT_INFO_0, gives you smurphy
information about you network transports (ever wonder what your MAC address is?).<P>

<B>CWorkstationInformation</B> - Patterned after WKSTA_INFO_102, used in CNetWorkstation::Enumerate<P>

<B>CWorkstationUser</B> - Patterned after WKSTA_USER_INFO_1, used in CNetWorkstation::Enumerate<P>

<B><A HREF="CXMLArchive.htm" TARGET="Explain">CXMLArchive</A></B> - This class
is modeled after the CArchive MFC class. It allows
you to serialize (or persist) objects to and from
<A HREF="http://www.w3.org/TR/" TARGET="_parent">XML</A> documents.<P>

<P>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="0" CELLSPACING="0">
<TR><TD BGCOLOR="#0" VALIGN="MIDDLE">
<FONT FACE="Arial" SIZE="3" COLOR="#FFFFFF">
&nbsp;<I><B>Classes That Ain't Exactly Win32</B></I></FONT>
</TD></TR></TABLE>
<P>

<B><A HREF="CBubble.htm" TARGET="Explain">CBubble</A></B> - Creates
a tooltip window where ever and how many ever you want.<P>

<B>CCircle</B> - Draws a circle on the screen.<P>

<B>CConstellation</B> - This ain't exactly Win32 encapsulation of something
useful. It is related to <B>CSquiggle</B> but instead of displaying data
as a squiggley line across the screen (like an oscilloscope), it
displays lots of little dots. It looks like a constellation of stars.<P>

<B>CConstellationData</B> - Data to be displayed by <B>CConstellation</B>.<P>

<B>CDrawingObjectGrid</B> - A grid of drawing objects like CCircle, etc.<P>

<B>CEllipse</B> - Draws an ellipse on the screen.<P>

<B><A HREF="CGarbageCollector.htm" TARGET="Explain">CGarbageCollector</A></B> -
Implements a garbage collection scheme (modeled after
COM) that allows objects to govern their own lifetimes.<P>

<B>CLabeledGrid</B> - A subclass of CDrawingObjectGrid that adds text labels 
to the objects.<P>

<B><A HREF="Pager.htm" TARGET="Explain">CPager</A></B> - A virtual base class to handle pagers.<P>

<B><A HREF="CQueue.htm" TARGET="Explain">CQueue</A></B> - Implements a thread-safe generic queue.<P>

<B>CRectangle</B> - Draws a rectangle on the screen.<P>

<B>CRoundedRectangle</B> - Draw a rectangle with rounded corners.<P>

<B><A HREF="SkyWord.htm" TARGET="Explain">CSkyWord</A></B> - Makes it easy to send messages to 
<A HREF="http://www.skytel.com/" TARGET="_parent">SkyTel</A> alphanumeric pagers.<P>

<B><A HREF="SprintSpectrum.htm" TARGET="Explain">CSprintSpectrum</A></B> - Makes it easy to send text messages to 
<A HREF="http://www.sprintopps.com/opps/wirels.html" TARGET="_parent">Sprint Spectrum</A>
PCS phones.<P>

<B>CSquare</B> - Draws a square on the screen. Admittedly not very
exciting and ground breaking but I was learning how to do these types
of things and was shocked that MFC couldn't do something this
simple.<P>

<B>CSquiggle</B> - A type of CRectangle that makes creating oscilloscope type displays
real easy.<P>

<B>CSquiggleData</B> - Data taken from o-scopes to be given to CSquiggle.<P>

<B>CWaitCursor</B> - Ye Olde Wait Cursor class.
It turns your cursor into an hour glass in the constructor and
returns it to normal in the destructor.<P>

<B>CWeather</B> - This class normalizes data associated with weather reports.<P>

<B><A HREF="WfcTrace.htm" TARGET="Explain">CWfcTrace</A></B> - Tracing class.
Used for adding automagically indented debug statements. It has 32 different
levels of tracing that can be set as a program runs to tailor the output.<P>

<H3>Miscellaneous Functions:</H3>

<B><A HREF="lmerr.htm" TARGET="Explain">Convert_NERR_Code_to_String</A></B> -
Converts NERR_* error codes to text; the FormatMessage() trick doesn't work on
these error codes.<P>

<B>bit_clear</B> - Macro to set a bit to zero.<P>

<B>bit_set</B> - Macro to set a bit to one.<P>

<B>bit_test</B> - Test the value of a bit.<P>

<B><A HREF="wfc_am_i_administrator.htm" TARGET="Explain">wfc_am_i_administrator</A></B> - C Function
that returns TRUE if you have Administrator priveleges.<P>

<B>wfc_append_string_to_CByteArray</A></B> - C Function
that appends a string to an array of bytes.<P>

<B><A HREF="wfc_append_text_to_edit_control.htm" TARGET="Explain">wfc_append_text_to_edit_control</A></B> - C Function
that appends text to an edit control.<P>

<B><A HREF="wfc_close_handle.htm" TARGET="Explain">wfc_close_handle</A></B> - C function
that returns TRUE if <B>CloseHandle</B>() returns not FALSE. This helps
in debugging when you pass an invalid handle to <B>CloseHandle</B>().<P>

<B><A HREF="wfc_convert_double_null_terminated_string.htm" TARGET="Explain">wfc_convert_double_null_terminated_string()</A></B> -
Converts a double-NULL terminated string to a CStringArray.
double-NULL strings are used in a lot of self-referential structures.<P>

<B><A HREF="wfc_convert_lpwstr_to_cstring.htm" TARGET="Explain">wfc_convert_lpcwstr_to_cstring()</A></B> - This eliminated a lot of code in the networking classes.
Microsoft (even in Visual C++ version 4.2) has the networking API header files all screwed up.
The string parameters are mis-typed. I used to have a lot of code in the classes to detect and 
fix this but it was real ugly (and prevented const correctness). Adding this function allowed
me to fix Microsoft's mistake in one function.<P>

<B><A HREF="wfc_create_hard_link.htm" TARGET="Explain">wfc_create_hard_link</A></B> - C function
that creates two directory entries for one file. It implements the upcoming NT 5.0
API named CreateHardLink().<P>

<B><A HREF="wfc_delete_oldest_file.htm" TARGET="Explain">wfc_delete_oldest_file</A></B> - C function
that deletes the oldest file in a directory. It will return TRUE if a file
was deleted or FALSE it a file was not deleted. This is useful in a file cache
management system.<P>

<B><A HREF="wfc_enable_privilege.htm" TARGET="Explain">wfc_enable_privilege</A></B> -
A little routine to enable a specific privilege by name.<P>

<B><A HREF="wfc_enable_all_privileges.htm" TARGET="Explain">wfc_enable_all_privileges</A></B> -
A routine I wrote because I hate
Microsoft's error messages. They are 100% accurate and totally useless.
For example, &quot;Access is Denied.&quot; <I><B>WHICH</B></I> access
is denied???? Another brilliant message was &quot;class failed to
initialize&quot; It came from a COM application. Wouldn't it be helpful
to know <I>which</I> of the four cudzillion COM object on the system
failed to load??? Anyway, <CODE>wfc_enable_all_privileges</CODE> simply
acquires as many privileges as is possible.<P>

<B><A HREF="wfc_get_directory_usage_percentage.htm" TARGET="Explain">wfc_get_directory_usage_percentage</A></B> - C function
that returns an integer percentage of the space used on a volume by a directory.
This is useful in a file cache management system.<P>

<B><A HREF="wfc_get_error_string.htm" TARGET="Explain">wfc_get_error_string</A></B> - C function
that cryptic error codes into something humanly readable.<P>

<B><A HREF="wfc_get_executable_directory.htm" TARGET="Explain">wfc_get_executable_directory</A></B> - C function
that returns the directory name (ending in a slash) that the
executable calling this function exists in. This is good for
finding configuration files that must exist in the same
directory as the executable.<P>

<B><A HREF="wfc_get_filename_from_handle.htm" TARGET="Explain">wfc_get_filename_from_handle</A></B> - 
C function that returns the file name given a file's handle. It
uses the partially documented <CODE>NtQueryInformationFile</CODE> to
perform this magic.<P>

<B><A HREF="wfc_get_operating_system_version_string.htm" TARGET="Explain">wfc_get_operating_system_version_string</A></B> -
Fills a CString with a nice OS version string (including service pack level).<P>

<B><A HREF="wfc_get_web_page.htm" TARGET="Explain">wfc_get_web_page()</A></B> -
Retrieves a URL and puts the page into a CStringArray.
This is great for retrieving data from the web.<P>

<B><A HREF="wfc_move_file_at_reboot.htm" TARGET="Explain">wfc_move_file_at_reboot()</A></B> - This function let's
you schedule a file to be moved at the next reboot.
This is how system DLL's are upgraded.<P>

<B><A HREF="wfc_parse_iso_8601_string.htm" TARGET="Explain">wfc_parse_iso_8601_string</A></B> -
This function parses ISO8601 dates into a CTime or COleDateTime object.<P>

<B><A HREF="wfc_set_thread_name.htm" TARGET="Explain">wfc_set_thread_name</A></B> -
A function that allows you to set a string constant as the &quot;name&quot;
of a thread. Really handy when debugging multi-threaded programs.<P>

<B><A HREF="wfc_start_screen_saver.htm" TARGET="Explain">wfc_start_screen_saver</A></B> -
C function that activates the screen saver.<P>

<B><A HREF="wfc_undocumented_get_system_process_list.htm" TARGET="Explain">wfc_undocumented_get_system_process_list</A></B> - Uses an 
undocumented function to get a list of all processes running
in an NT system.<P>

$Revision: 35 $
<BR>
<ADDRESS>Sam Blackburn</ADDRESS>
<ADDRESS>Internet: <A HREF="mailto:wfc@pobox.com">wfc@pobox.com</A></ADDRESS>
<A HREF="homepage.htm" TARGET="_parent">Return to Sam's Home Page</A>
</BODY>
</HTML>
