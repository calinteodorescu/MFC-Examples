<HTML>
<HEAD>
   <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
   <META NAME="Author" CONTENT="Zafir Anjum">
   <TITLE>Tools - ODBC Class generator</TITLE>
</HEAD>
<body background="../fancyhome/back.gif" bgcolor="#FFFFFF" link="#B50029" vlink="#8E2323" alink="#FF0000" bgproperties="fixed">
<table WIDTH="100%">
<tr WIDTH="100%">
<td align=center><!--#exec cgi="/cgi/ads.cgi"--><td>
</tr>
</table>

<CENTER>
<H3>
<FONT COLOR="#AOAO99">ODBC Class Generator For Bulk Row Fetching</FONT></H3></CENTER>

<HR>

<p><font face="Arial">(Designed and developed by <a href="mailto:ShekarNarayanan@hotmail.com">Shekar Narayanan</a>)</font></font><font ></p>

<p></font><font >I have developed this Class Generator after using the CRecordset
for quite some time. CRecordset is great but it has lot of limitations and is SLOW. </p>

<p>Most of the time, I had to display thousands of records in a list view. Using the
CRecordset, it takes a lot of time. MFC also provides a way to do &#145;<strong>bulk fetch</strong>&#146;
but it is tedious to implement.</p>

<p>So, I created a class which will do the <b>bulk fetching</b> and also allow easy
inserts, update and delete. After creating tens of these kind of classes, it was no
difficult to automate the class creation process.</p>
<i><b>

<p>A simple comparison:</b></i></p>

<p>The code generated by this tool along with virtual list view <strong>gets and displays
5000 records from SQL server database in just</font><font > one second!</font></strong><font ><b> </b>Whereas, using the CRecordset, it takes <b>around 20 seconds. </b>These
numbers are based on 266 MHz Pentium with 64MB RAM..</p>

<p>&nbsp;</font><font FACE="Arial"><i><b></p>

<p>Features</b></i></font><font ></p>

<blockquote>
  <ul>
    <li>Easily create a class which uses Bulk Row Fetching for faster data retrieval</li>
    <li>Uses direct ODBC SDK calls which are easy to understand and flexible to modify</li>
    <li>More methods can be easily added to the object</li>
    <li>Creating Joins and using other SQL features is very easy, since the object uses direct
      SQL statements</li>
  </ul>
  <p></font>&nbsp;</p>
</blockquote>
<font FACE="Arial"><i><b>

<p>Usage of the Product</b></i></font><font SIZE="2"></p>

<p>Using the Class Generator is easy. </p>

<blockquote>
  <ul>
    <li>Click Open to display the list of Data Sources</li>
    <li>Select the Data Source and click Next</li>
    <li>Select the Table or View you want to use and click Next</li>
    <li>Click Finish</li>
  </ul>
</blockquote>

<p>A list view displays the columns in the table along with the default member variables.
You can easily change the name of the member variable and if you want to exclude any
column from the object, you can do that by simply clicking Remove button.</p>

<p><img src="odbc_classgen.jpg" WIDTH="823" HEIGHT="402"></p>

<p>&nbsp;After changing /removing the variable names, click the Create button to open the
Generate Dialog box. It shows the default values based the on the table name. After
modifying the values click the OK button to generate the code. You can also print this
list.</p>

<p>&nbsp;</p>

<p>Following is a sample header file generated by this tool:</font><font FACE="Courier" SIZE="2"></p>

<p>/*</p>

<p>**ConsultantsSet.h</p>

<p>**CONSULTANTS Definition file</p>

<p>*/</p>

<p>#if !defined(__DB_CONSULTANTS_FIELDS__)</p>

<p>#define __DB_CONSULTANTS_FIELDS__</p>

<p>#ifndef __AFXTEMPL_H__</p>

<p>#pragma message(&quot;Include AfxTempl.h in StdAfx.h for faster Compilation&quot;)</p>

<p>#include &lt;afxtempl.h&gt;</p>

<p>#endif</p>

<p>#define CONSULTANTS_NAME_SIZE 31</p>

<p>#define CONSULTANTS_HOME_ADDRESS_SIZE 81</p>

<p>#define CONSULTANTS_CLIENT_NAME_SIZE 31</p>

<p>#define CONSULTANTS_CLIENT_ADDRESS_SIZE 81</p>

<p>&nbsp;</p>

<p>//Internal Cache for the data</p>

<p>typedef struct</p>

<p>{</p>

<blockquote>
  <p>long m_ID;</p>
  <p>SDWORD m_IDInd;</p>
  <p>char m_Name[CONSULTANTS_NAME_SIZE];</p>
  <p>SDWORD m_NameInd;</p>
  <p>char m_HomeAddress[CONSULTANTS_HOME_ADDRESS_SIZE];</p>
  <p>SDWORD m_HomeAddressInd;</p>
  <p>char m_ClientName[CONSULTANTS_CLIENT_NAME_SIZE];</p>
  <p>SDWORD m_ClientNameInd;</p>
  <p>char m_ClientAddress[CONSULTANTS_CLIENT_ADDRESS_SIZE];</p>
  <p>SDWORD m_ClientAddressInd;</p>
</blockquote>

<p>}FF_DB_CONSULTANTS_FIELDS, *pFF_DB_CONSULTANTS_FIELDS;</p>

<p>&nbsp;</p>

<p>//structure to hold the final data</p>

<p>typedef struct</p>

<p>{</p>

<blockquote>
  <p>long m_ID;</p>
  <p>CString m_Name;</p>
  <p>CString m_HomeAddress;</p>
  <p>CString m_ClientName;</p>
  <p>CString m_ClientAddress;</p>
</blockquote>

<p>}DB_CONSULTANTS_FIELDS, *pDB_CONSULTANTS_FIELDS;</p>

<p>&nbsp;</p>

<p>//Class Definition</p>

<p>class CConsultantsSet</p>

<p>{</p>

<p>public:</p>

<p>//Standard constructor</p>

<p>CConsultantsSet(CDatabase* pDB = NULL);</p>

<p>//Standard Destructor</p>

<p>~CConsultantsSet();</p>

<p>//Operations</p>

<p>bool GetSpecific(pDB_CONSULTANTS_FIELDS);</p>

<p>bool Insert(pDB_CONSULTANTS_FIELDS);</p>

<p>bool Update(pDB_CONSULTANTS_FIELDS);</p>

<p>bool Delete(pDB_CONSULTANTS_FIELDS);</p>

<p>int Load();</p>

<p>//Attributes</p>

<p>CTypedPtrArray &lt;CPtrArray, pDB_CONSULTANTS_FIELDS&gt; m_aData;</p>

<p>private:</p>

<p>CDatabase* m_pDatabase;</p>

<p>HSTMT m_hstmt;</p>

<p>int m_nRowSetSize;</p>

<p>};</p>

<p>#endif</p>

<p>/*</p>

<p>** end file</p>

<p>*/</font><font SIZE="2"></p>

<p>&nbsp;</p>

<p>The header file contains two structures FF_DB_CONSULTANTS_FIELDS and
DB_CONSULTANTS_FIELDS. The first one is used for bulk row fetching. The second is used to
in a CTypedPtrArray and contains the actual data.</p>

<p>&nbsp;</font><font face="Arial"><i><b></p>

<p>Using the Generated Code in your Application</b></i></font><font SIZE="2"></p>

<p>In order to use this class in your application, create a regular MFC application with
database header support. The View can be either CFormView or CListView . In this example,
m_List is a CListCtrl.</font><font FACE="Courier" SIZE="2"></p>

<p>#include &quot;ConsultantSet.h&quot;</p>

<p>&nbsp;</p>

<p>void OnInitialUpdate()</p>

<p>{</p>

<p>&nbsp;&nbsp;&nbsp; . . . </p>

<p>&nbsp;&nbsp;&nbsp; CConsultantSet tblSet(&amp;theApp.m_DB);</p>

<p>&nbsp;&nbsp;&nbsp; int nCount = tblSet.Load();</p>

<p>&nbsp;&nbsp;&nbsp; for (int I = 0; I &lt; nCount; I++)</p>

<p>&nbsp;&nbsp;&nbsp; {</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pDB_CONSULTANT_FIELDS pdbFields =
tblSet.m_aData.GetAt(I);</p>

<blockquote>
  <blockquote>
    <p>m_List.InsertItem(I, pdbFields-&gt;m_Name;</p>
    <p>m_List.SetItemText(I, pdbFields-&gt;m_ClientName);</p>
  </blockquote>
</blockquote>

<p>&nbsp;&nbsp;&nbsp; }</p>

<p>}</p>

<p>&nbsp;</p>

<p>If you want to insert an item to the table,</p>

<p>&nbsp;&nbsp;&nbsp; CConsultantSet tblSet(&amp;theApp.m_DB);</p>

<p>&nbsp;&nbsp;&nbsp; DB_CONSULTANT_FIELDS dbFields;</p>

<p>&nbsp;&nbsp;&nbsp; dbFields.m_ID = 100;</p>

<p>&nbsp;&nbsp;&nbsp; dbFields.m_Name = &quot;Some Name&quot;;</p>

<p>&nbsp;&nbsp;&nbsp; // Fill in rest of the fields</p>

<p>&nbsp;&nbsp;&nbsp; tblSet.Insert(&amp;dbFields);</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<p>Rest of the functions, follow the same standard and very easy to understand. I always
use a single CDatabase object in the Application class. Create a CDatabase member variable
in the CWinApp derived class and also make the 'theApp' as extern in the header file. This
way, you don't have to use AfxGetApp() and typecast it every time.</p>

<p>&nbsp;</font></p>

<p>This tool generates the code which can be compiled in VC++ 5.0. With minor
modification, it can be used with any C++ compiler.</p>

<p><font FACE="Courier" SIZE="2">&nbsp;</font>I have tested this tool with MS Access and
SQL Server only. So there may be a few bugs. If you encounter any bugs, please email me.</p>

<p>I would appreciate your ideas for enhancements.</p>

<p>&nbsp;</p>

<p>Acknowledgments:</p>

<p>I would like to thank the <a href="http://www.codeguru.com">CodeGuru</a> contributors
for List Control and Bitmap buttons I have used in this tool.</p>



<P><A HREF="odbc_classgen.zip">Download</A> 274K





<P>Posted on: March 8, 98.
<br>Changed the download file from EXE to ZIP - 3/10/98

<P>
<HR>
<TABLE BORDER=0 WIDTH="100%" >
<TR>
<TD WIDTH="33%"><FONT SIZE=-1><A HREF="http://www.codeguru.com">Goto HomePage</A></FONT></TD>

<TD WIDTH="33%">
<CENTER><FONT SIZE=-2>&copy; 1998 Zafir Anjum</FONT>&nbsp;</CENTER>
</TD>

<TD WIDTH="34%">
<DIV ALIGN=right><FONT SIZE=-1>Contact me: <A HREF="mailto:zafir@home.com">zafir@home.com</A>&nbsp;</FONT></DIV>
</TD>
</TR>
</TABLE>

</BODY>
</HTML>
