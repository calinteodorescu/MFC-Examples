// FileSystem.h -- Interface for the CFileSystem class
// Copyright (C) 1996 by Walter Oney
// All rights reserved

#ifndef FILESYSTEM_H
#define FILESYSTEM_H

#pragma warning(disable:4075) // nonstandard init seg
#pragma init_seg("INITCODE")
#pragma warning(default:4075)

///////////////////////////////////////////////////////////////////////////////
// Useful general-purpose definitions

#include <string.h>
#pragma intrinsic(memcmp, memcpy, memset, strcat, strcmp, strcpy, strlen)

#ifdef DEBUG
    #define ASSERT(e) if(!(e)){Debug_Printf("Assertion failure in " __FILE__ ", line %d: " #e "\r\n", __LINE__);\
	_asm int 1\
	}
#else
    #define ASSERT(e)
#endif

#ifndef MAKELONG
    #define MAKELONG(low, high) ((LONG)(((WORD)(low)) | (((DWORD)((WORD)(high))) << 16)))
#endif

#ifndef FIELDOFFSET
    #define FIELDOFFSET(type, field) ((DWORD)(&((type *)0)->field))
#endif

#ifndef arraysize
    #define arraysize(p) (sizeof(p)/sizeof((p)[0]))
#endif

#ifndef min
    #define min(a,b) ((a) > (b) ? (b) : (a))
#endif

#ifndef max
    #define max(a,b) ((a) > (b) ? (a) : (b))
#endif

///////////////////////////////////////////////////////////////////////////////
// CFileSystem class:

extern "C" extern ILB theILB;

class CFileSystem
{				// CFileSystem
public:
    CFileSystem();
    ~CFileSystem();

    static CFileSystem* (*CreateNewFcn)();
    static int ProviderId;
    static BOOL Register(CFileSystem* (*createnew)());
};				// CFileSystem

///////////////////////////////////////////////////////////////////////////////
// CLocalFileSystem

class CLocalFileSystem : public CFileSystem
{				// CLocalFileSystem
public:
    CLocalFileSystem();
    ~CLocalFileSystem();

    CLocalFileSystem*	m_next; // next instance
    CLocalFileSystem*	m_prev; // previous instance
    PVRP	m_vrp;		// volume we think is mounted now
    PVOID	m_dpb;		// DOS drive parameter block
    BYTE	m_drive;	// drive letter
    BYTE	m_origdrive;	// original drive letter

    static BOOL MountVolumeThunk(pioreq pir);
    static CFileSystem* CreateNew();
    static BOOL Register(CFileSystem* (*createnew)());
    static void OnCommandComplete(PIOR ior);
    static CLocalFileSystem* First;

    PIOR	CreateIOR(DWORD flags = 0);
    PIOR	CreateIOR(DWORD opcode, DWORD flags);
    void	DestroyIOR(PIOR ior);
    void	SatisfyCriteria(PIOR ior);
    void	SendCommand(PIOR ior);
    void	SendCommandAndWait(PIOR ior);
    PBYTE	ReadBootSector();

    // Overridable member functions:

    virtual int MountVolume(pioreq pir);    // can override, but shouldn't need to
    virtual int VerifyVolume(pioreq pir);   // can override, but shouldn't need to
    virtual int UnloadVolume(pioreq pir);   // should override
    virtual int MountChildVolume(pioreq pir);
    virtual int MapDrive(pioreq pir);	    // can override, but shouldn't need to
    virtual int UnmapDrive(pioreq pir);	    // can override, but shouldn't need to

    virtual BOOL    OurVolume(pioreq pir);  // MUST OVERRIDE
    virtual BOOL    SameVolume(CLocalFileSystem* old); // MUST OVERRIDE
    virtual void    GetVolumeLabel(PDWORD pVolSer, char* pVolLabel); // MUST OVERRIDE

    // Volume request handlers. The first table declares the
    // virtual functions that do the actual work. These should
    // all be overridden

    #undef vt
    #define vt(f) virtual int f(pioreq pir);
    vt(DeleteFile)
    vt(Dir)
    vt(FileAttributes)
    vt(FlushVolume)
    vt(GetDiskInfo)
    vt(OpenFile)
    vt(RenameFile)
    vt(SearchFile)
    vt(QueryResourceInfo)
    vt(DisconnectResource)
    vt(NamedPipeUNCRequest)
    vt(Ioctl16Drive)
    vt(GetDiskParms)
    vt(FindFirstFile)
    vt(DirectDiskIO)

    // This table declares the static thunks that interface between
    // IFS and the member functions declared above

    #undef vt
    #define vt(f) static int f##Thunk(pioreq pir);
    vt(DeleteFile)
    vt(Dir)
    vt(FileAttributes)
    vt(FlushVolume)
    vt(GetDiskInfo)
    vt(OpenFile)
    vt(RenameFile)
    vt(SearchFile)
    vt(QueryResourceInfo)
    vt(DisconnectResource)
    vt(NamedPipeUNCRequest)
    vt(Ioctl16Drive)
    vt(GetDiskParms)
    vt(FindFirstFile)
    vt(DirectDiskIO)

};				// CLocalFileSystem

///////////////////////////////////////////////////////////////////////////////
// CCharacterDevice

class CCharacterDevice : public CFileSystem
{				// CCharacterDevice
public:
    CCharacterDevice();
    ~CCharacterDevice();

    static BOOL Register(CFileSystem* (*createnew)());
};				// CCharacterDevice

///////////////////////////////////////////////////////////////////////////////
// CNetworkFileSystem

class CNetworkFileSystem : public CFileSystem
{				// CNetworkFileSystem
public:
    CNetworkFileSystem();
    ~CNetworkFileSystem();

    static BOOL Register(CFileSystem* (*createnew)());
};				// CNetworkFileSystem
#endif // FILESYSTEM_H