<HTML>
<HEAD>
   <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
   <META NAME="Author" CONTENT="Zafir Anjum">
   <TITLE>CListCtrl - Sorting the list based on text in any column</TITLE>
</HEAD>
<body background="../fancyhome/back.gif" bgcolor="#FFFFFF" link="#B50029" vlink="#8E2323" alink="#FF0000" bgproperties="fixed">
<table WIDTH="100%">
<tr WIDTH="100%">
<td align=center><!--#exec cgi="/cgi/ads.cgi"--><td>
</tr>
</table>


<CENTER>
<H3>
<FONT COLOR="#AOAO99">Sorting the list based on text in any column</FONT></H3></CENTER>

<HR WIDTH="100%">The list view control has two directly supported mechanism
for sorting the items in the list. One of them is to use the styles - LVS_SORTASCENDING
or LVS_SORTDESCENDING when creating the control. Any item inserted into
the list is then automatically inserted in a sorted order. Although this
does not involve any extra programming work, it does have the drawbacks
that the sorting is always based on the item text and cannot be sorted
on sub items and also that any later changes or edits to the item does
not update the sorting order.

<P>The second supported mechanism for sorting a list is by using the SortItems()
function. This method is very versatile but requires that the program keep
track of the items in the list using the item data. Therefore, before the
SortItems() function can be used, each item in the list should have an
item data associated with it. You normally associate data with an item
by using InsertItem() or SetItemData(). SortItems() also requires the address
of an application-defined comparison function. The comparison function
is called during the sort operation each time the relative order of two
list items needs to be compared. The comparison function must be either
a static member of a class or a stand alone function that is not a member
of any class. The comparision function is called with the item data of
the items being compared as arguments to the function. One common mistake
is to assume that the arguments passed to the comparision function are
the row indices of the items.

<P>The code given below takes a custom approach to sorting and can be reused
easily. The SortTextItems() can sort the list based on the text in any
of the columns. A shortcoming of this function is that if the column represents
a numeric value the sort order is probably not the one you want. SortTextItems()
is a recursive function and uses the quick sort algorithm. The last two
arguments are mostly for recursive calls and the function declaration in
the class should have default values of zero and one assigned to them.
When swapping two rows, each subitem, image and state information also
has to be swapped.
<BR>&nbsp;
<PRE><TT><FONT COLOR="#990000">
// SortTextItems	- Sort the list based on column text
// Returns		- Returns true for success
// nCol			- column that contains the text to be sorted
// bAscending		- indicate sort order
// low			- row to start scanning from - default row is 0
// high			- row to end scan. -1 indicates last row
BOOL CMyListCtrl::SortTextItems( int nCol, BOOL bAscending,&nbsp;
					int low /*= 0*/, int high /*= -1*/ )
{
	if( nCol >= ((CHeaderCtrl*)GetDlgItem(0))->GetItemCount() )
		return FALSE;

	if( high == -1 ) high = GetItemCount() - 1;

	int lo = low;
	int hi = high;
	CString midItem;

	if( hi &lt;= lo ) return FALSE;

	midItem = GetItemText( (lo+hi)/2, nCol );

	// loop through the list until indices cross
	while( lo &lt;= hi )
	{
		// rowText will hold all column text for one row
		CStringArray rowText;

		// find the first element that is greater than or equal to&nbsp;
		// the partition element starting from the left Index.
		if( bAscending )
			while( ( lo &lt; high ) &amp;&amp; ( GetItemText(lo, nCol) &lt; midItem ) )
				++lo;
		else
			while( ( lo &lt; high ) &amp;&amp; ( GetItemText(lo, nCol) > midItem ) )
				++lo;

		// find an element that is smaller than or equal to&nbsp;
		// the partition element starting from the right Index.
		if( bAscending )
			while( ( hi > low ) &amp;&amp; ( GetItemText(hi, nCol) > midItem ) )
				--hi;
		else
			while( ( hi > low ) &amp;&amp; ( GetItemText(hi, nCol) &lt; midItem ) )
				--hi;

		// if the indexes have not crossed, swap
		// and if the items are not equal
		if( lo &lt;= hi )
		{
			// swap only if the items are not equal
			if( GetItemText(lo, nCol) != GetItemText(hi, nCol))
			{
				// swap the rows
				LV_ITEM lvitemlo, lvitemhi;
				int nColCount =&nbsp;
					((CHeaderCtrl*)GetDlgItem(0))->GetItemCount();
				rowText.SetSize( nColCount );
				int i;
				for( i=0; i&lt;nColCount; i++)
					rowText[i] = GetItemText(lo, i);
				lvitemlo.mask = LVIF_IMAGE | LVIF_PARAM | LVIF_STATE;
				lvitemlo.iItem = lo;
				lvitemlo.iSubItem = 0;
				lvitemlo.stateMask = LVIS_CUT | LVIS_DROPHILITED |&nbsp;
						LVIS_FOCUSED |&nbsp; LVIS_SELECTED |&nbsp;
						LVIS_OVERLAYMASK | LVIS_STATEIMAGEMASK;

				lvitemhi = lvitemlo;
				lvitemhi.iItem = hi;

				GetItem( &amp;lvitemlo );
				GetItem( &amp;lvitemhi );

				for( i=0; i&lt;nColCount; i++)
					SetItemText(lo, i, GetItemText(hi, i));

				lvitemhi.iItem = lo;
				SetItem( &amp;lvitemhi );

				for( i=0; i&lt;nColCount; i++)
					SetItemText(hi, i, rowText[i]);

				lvitemlo.iItem = hi;
				SetItem( &amp;lvitemlo );
			}

			++lo;
			--hi;
		}
	}

	// If the right index has not reached the left side of array
	// must now sort the left partition.
	if( low &lt; hi )
		SortTextItems( nCol, bAscending , low, hi);

	// If the left index has not reached the right side of array
	// must now sort the right partition.
	if( lo &lt; high )
		SortTextItems( nCol, bAscending , lo, high );

	return TRUE;
}</FONT></TT></PRE>
&nbsp;
<BR>&nbsp;

<P>
<HR>
<TABLE BORDER=0 WIDTH="100%" >
<TR>
<TD WIDTH="33%"><FONT SIZE=-1><A HREF="http://www.codeguru.com">Goto HomePage</A></FONT></TD>

<TD WIDTH="33%">
<CENTER><FONT SIZE=-2>&copy; 1998 Zafir Anjum</FONT>&nbsp;</CENTER>
</TD>

<TD WIDTH="34%">
<DIV ALIGN=right><FONT SIZE=-1>Contact me: <A HREF="mailto:zafir@home.com">zafir@home.com</A>&nbsp;</FONT></DIV>
</TD>
</TR>
</TABLE>

</BODY>
</HTML>
