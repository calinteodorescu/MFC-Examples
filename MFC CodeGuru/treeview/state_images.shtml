<HTML>
<HEAD>
   <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
   <META NAME="Author" CONTENT="Zafir Anjum">
   <META NAME="GENERATOR" CONTENT="Mozilla/4.0 [en] (WinNT; I) [Netscape]">
   <TITLE>Setting up state images</TITLE>
</HEAD>
<body background="../fancyhome/back.gif" bgcolor="#FFFFFF" link="#B50029" vlink="#8E2323" alink="#FF0000" bgproperties="fixed">
<table WIDTH="100%">
<tr WIDTH="100%">
<td align=center><!--#exec cgi="/cgi/ads.cgi"--><td>
</tr>
</table>


<CENTER>
<H3>
<FONT COLOR="#AOAO99">Setting up state images</FONT></H3></CENTER>

<CENTER>
<H3>

<HR></H3></CENTER>
As you are already aware, the tree view control can display two images
for each item. Each of these two images belong in different image list
controls that have to be associated with the tree control. Whereas, an
item can have upto 256 item images, it can only have 15 state images. Nevertheless,
the programming for the state images is very similar to the programming
for item images.

<P>An image list has to be created before it can be associated with the
tree view control. You can create the image list from a single bitmap,
horizontally laid out to contain all the images or you can add individual
icons to the image list.
<H4>
Step 1: Create the bitmap</H4>
Add a bitmap resource in the resource editor that contains all the icons.
Here is an example below. The individual icons in this bitmap are 13x13
pixels, but you may choose a different size and it need not be a square.
The first image in the list is not used.

<P>&nbsp;<IMG SRC="state_images.gif" HEIGHT=15 WIDTH=69>
<H4>
Step 2: Add a member variable to hold the image list</H4>
The member variable is usually added to the class that is responsible for
setting up the tree view control. This would usually be the CView derivative
or a CDialog derivative. You can also add the member variable to the sub-class
of CTreeCtrl which is what I recommend.
<BR>&nbsp;
<PRE><TT><FONT COLOR="#990000">class CTreeCtrlX : public CTreeCtrl
{
// Construction
public:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CTreeCtrlX();

// Attributes
public:
&nbsp;&nbsp;&nbsp; CImageList m_imageState ;
&nbsp;&nbsp;&nbsp; :
&nbsp;&nbsp;&nbsp; :
&nbsp;&nbsp;&nbsp; :

}</FONT></TT></PRE>

<H4>
Step 3: Create and set the image list</H4>
Call the Create() function of the image object with the resource id of
the bitmap we created in step 1 and the width of each icon. The height
of the icons is automatically set to the height of the bitmap. The third
argument required by the Create() function represents the number of new
images the resized image list can contain. Since we are creating the image
list from a bitmap, we would normally not add any more images at runtime
so we let this value be one. The last argument is the mask color. That
is, all the pixels of this color will behave as a transparent color. Since
normally the window color is white, we set the mask color to white.

<P>Once the image list has been created, the tree view control has to be
instructed to use it. We do that by calling the SetImageList() function.
The following statement usually belongs in the OnInitDialog() function
or the OnInitialUpdate() function. Note that in the call to SetImageList(),
the second argument is TVSIL_STATE.
<BR>&nbsp;
<PRE><TT><FONT COLOR="#990000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_tree.m_imageState.Create( IDB_STATE, 13, 1, RGB(255,255,255) );
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_tree.SetImageList( &amp;(m_tree.m_imageState), TVSIL_STATE );</FONT></TT></PRE>

<H4>
Step 4: Specify state icons for the items</H4>
Once an image list has been associated with the tree view control, you
can instruct the tree view control to the use the state image you want
when inserting an item to the control. You can also use the SetItemState()
image function. In both the cases you have to use the macro INDEXTOSTATEIMAGEMASK().
This macro essentially rearranges the bits of the index value to be compatible
with what the tree view control expects. To remove the state image for
an item, use the index zero. Here are example usages –
<BR>&nbsp;
<PRE><TT><FONT COLOR="#990000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Using TV_INSERTSTRUCT
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CString str = "xyzASDFqwerZCV";
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TV_INSERTSTRUCT tv_is;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; tv_is.hParent = parent ? parent : TVI_ROOT;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; tv_is.hInsertAfter = TVI_LAST ;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; tv_is.item.mask = TVIF_TEXT | TVIF_STATE;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; tv_is.item.stateMask = TVIS_STATEIMAGEMASK;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; tv_is.item.state = INDEXTOSTATEIMAGEMASK( 1 );
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; tv_is.item.pszText = str.GetBuffer(1);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; tv_is.item.cchTextMax = str.GetLength();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; hItem = InsertItem( &amp;tv_is );
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; str.ReleaseBuffer();


&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Using SetItemState
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SetItemState( hItem, INDEXTOSTATEIMAGEMASK(1), TVIS_STATEIMAGEMASK );</FONT></TT></PRE>
&nbsp;

<P>
<HR>
<TABLE BORDER=0 WIDTH="100%" >
<TR>
<TD WIDTH="33%"><FONT SIZE=-1><A HREF="http://www.codeguru.com">Goto HomePage</A></FONT></TD>

<TD WIDTH="33%">
<CENTER><FONT SIZE=-2>&copy; 1998 Zafir Anjum</FONT>&nbsp;</CENTER>
</TD>

<TD WIDTH="34%">
<DIV ALIGN=right><FONT SIZE=-1>Contact me: <A HREF="mailto:zafir@home.com">zafir@home.com</A>&nbsp;</FONT></DIV>
</TD>
</TR>
</TABLE>

</BODY>
</HTML>
