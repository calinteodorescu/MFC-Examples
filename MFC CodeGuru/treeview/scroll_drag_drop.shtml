<HTML>
<HEAD>
   <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
   <META NAME="Author" CONTENT="Zafir Anjum">
   <META NAME="GENERATOR" CONTENT="Mozilla/4.0 [en] (WinNT; I) [Netscape]">
   <TITLE>Scrolling during drag and drop</TITLE>
</HEAD>
<body background="../fancyhome/back.gif" bgcolor="#FFFFFF" link="#B50029" vlink="#8E2323" alink="#FF0000" bgproperties="fixed">
<table WIDTH="100%">
<tr WIDTH="100%">
<td align=center><!--#exec cgi="/cgi/ads.cgi"--><td>
</tr>
</table>


<CENTER>
<H3>
<FONT COLOR="#AOAO99">Scrolling during drag and drop</FONT></H3></CENTER>

<CENTER>
<H3>

<HR></H3></CENTER>
When dragging an item it is quite possible that the drop target is not
visible. Sometimes the user can collapse some items so that both the item
to be dragged and the item that is to be the drop target are both visible.
However, the user doesn’t always have this recourse. Besides, most professional
apps provide some form of scrolling while the item is being dragged.

<P>In the implementation discussed below, we use a timer to enable us to
drag the outline. We also scroll at varying speed depending on how far
the cursor is from the border of the control.
<H4>
Step 1: Add member variables to class</H4>
We declare two variables. One to hold the timer id and the other to hold
a counter for the timer ticks. You may also choose to declare two more
variable - for the event id that will be generated by the timer and the
timeout value used for the timer. I have used hard coded values of 1 and
75 respectively.
<PRE><TT><FONT COLOR="#990000">protected:
	UINT&nbsp;&nbsp;&nbsp; m_nTimerID;
	UINT&nbsp;&nbsp;&nbsp; m_timerticks;</FONT></TT></PRE>

<H4>
Step 2: Set timer in TVN_BEGINDRAG handler</H4>
We install the timer in the TVN_BEGINDRAG handler. Place the following
statement at the end of you handler function ( I have used OnBeginDrag()
) in previous sections.
<BR>&nbsp;
<PRE><TT><FONT COLOR="#990000">	// Set up the timer
	m_nTimerID = SetTimer(1, 75, NULL);</FONT></TT></PRE>

<H4>
Step 3: Add a WM_TIMER handler</H4>
You can use the class wizard to add the WM_TIMER handler. By default this
function is given the name OnTimer(). We first make sure that we are handling
the right timer event. The next task is to update the drag image position.

<P>We then determine whether scrolling is required. The criteria we use
for this is that the cursor should be close to the top edge of the control
or above the control. On the other end, if the cursor is near the bottom
edge of the control or below the control, then we scroll in the other direction.
We then compute a number to control the speed of scrolling. We have used
a hard coded value of six different speed which should be enough. Each
scroll speed range is 20 pixels tall. I’ll leave the rest of the logic
to control the scroll speed as an exercise for the reader - you.

<P>You may notice that the call to DragMove() uses screen coordinates.
The DragMove() function needs the screen coordinates if the call to DragEnter()
– when you began the drag operation – had associtated the drag image to
the desktop window. Use the client coordinates if the call to DragEnter()
had specified the treeview control.

<P>Before we go on the next step, I’d like to discuss the behaviour of
GetVisibleCount(). This function is supposed to return the number of visible
items but instead it returns the maximum number of items that can be visible
at one time. We therefore make a check for NULL before calling SelectDropTarget().
<BR>&nbsp;
<PRE><TT><FONT COLOR="#990000">void CTreeCtrlX::OnTimer(UINT nIDEvent)&nbsp;
{
	if( nIDEvent != m_nTimerID )
	{
		CTreeCtrl::OnTimer(nIDEvent);
		return;
	}

	// Doesn't matter that we didn't initialize m_timerticks
	m_timerticks++;

	POINT pt;
	GetCursorPos( &amp;pt );
	RECT rect;
	GetClientRect( &amp;rect );
	ClientToScreen( &amp;rect );

	// NOTE: Screen coordinate is being used because the call
	// to DragEnter had used the Desktop window.
	CImageList::DragMove(pt);

	HTREEITEM hitem = GetFirstVisibleItem();

	if( pt.y &lt; rect.top + 10 )
	{
		// We need to scroll up
		// Scroll slowly if cursor near the treeview control
		int slowscroll = 6 - (rect.top + 10 - pt.y) / 20;
		if( 0 == ( m_timerticks % (slowscroll > 0? slowscroll : 1) ) )
		{
			CImageList::DragShowNolock(FALSE);
			SendMessage( WM_VSCROLL, SB_LINEUP);
			SelectDropTarget(hitem);
			m_hitemDrop = hitem;
			CImageList::DragShowNolock(TRUE);
		}
	}
	else if( pt.y > rect.bottom - 10 )
	{
		// We need to scroll down
		// Scroll slowly if cursor near the treeview control
		int slowscroll = 6 - (pt.y - rect.bottom + 10 ) / 20;
		if( 0 == ( m_timerticks % (slowscroll > 0? slowscroll : 1) ) )
		{
			CImageList::DragShowNolock(FALSE);
			SendMessage( WM_VSCROLL, SB_LINEDOWN);
			int nCount = GetVisibleCount();
			for ( int i=0; i&lt;nCount-1; ++i )
				hitem = GetNextVisibleItem(hitem);
			if( hitem )
				SelectDropTarget(hitem);
			m_hitemDrop = hitem;
			CImageList::DragShowNolock(TRUE);
		}
	}
}</FONT></TT></PRE>

<H4>
Step 4: Kill the timer when dragging finishes</H4>
Call KillTimer( m_nTimerID ) whenever the drag operation finishes. This
would include the PreTranslateMessage() if you are cancelling the drag
on an escape key and OnLButtonUp().
<BR>&nbsp;

<P>
<HR>
<TABLE BORDER=0 WIDTH="100%" >
<TR>
<TD WIDTH="33%"><FONT SIZE=-1><A HREF="http://www.codeguru.com">Goto HomePage</A></FONT></TD>

<TD WIDTH="33%">
<CENTER><FONT SIZE=-2>&copy; 1998 Zafir Anjum</FONT>&nbsp;</CENTER>
</TD>

<TD WIDTH="34%">
<DIV ALIGN=right><FONT SIZE=-1>Contact me: <A HREF="mailto:zafir@home.com">zafir@home.com</A>&nbsp;</FONT></DIV>
</TD>
</TR>
</TABLE>

</BODY>
</HTML>
